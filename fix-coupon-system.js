import { db } from './server/db.js';
import { users, coupons, couponUses, wallets } from './shared/schema.js';
import { eq, and, isNotNull } from 'drizzle-orm';

async function fixCouponSystem() {
  console.log("üîß Corrigindo sistema de cupons...\n");
  
  try {
    // 1. Verificar cupom SORTE
    const [sorteCoupon] = await db.select()
      .from(coupons)
      .where(eq(coupons.code, 'SORTE'));
    
    if (!sorteCoupon) {
      console.log("‚ùå Cupom SORTE n√£o existe. Criando...");
      
      await db.insert(coupons).values({
        code: 'SORTE',
        description: 'B√¥nus de boas-vindas - 45 raspadinhas',
        bonusType: 'scratch_cards',
        bonusAmount: '45',
        minDeposit: '15.00',
        isActive: true,
        usageLimit: 1000,
        usageCount: 0
      });
      
      console.log("‚úÖ Cupom SORTE criado com 45 raspadinhas de b√¥nus");
    } else {
      // Atualizar cupom existente
      await db.update(coupons)
        .set({
          bonusAmount: '45',
          bonusType: 'scratch_cards',
          minDeposit: '15.00',
          isActive: true
        })
        .where(eq(coupons.code, 'SORTE'));
      
      console.log("‚úÖ Cupom SORTE atualizado:");
      console.log(`   Tipo: scratch_cards`);
      console.log(`   B√¥nus: 45 raspadinhas`);
      console.log(`   Dep√≥sito m√≠nimo: R$ 15.00`);
    }
    
    // 2. Verificar cupom TESTE2025
    const [teste2025Coupon] = await db.select()
      .from(coupons)
      .where(eq(coupons.code, 'TESTE2025'));
    
    if (!teste2025Coupon) {
      console.log("\n‚ùå Cupom TESTE2025 n√£o existe. Criando...");
      
      await db.insert(coupons).values({
        code: 'TESTE2025',
        description: 'C√≥digo de teste - 10 raspadinhas',
        bonusType: 'scratch_cards',
        bonusAmount: '10',
        minDeposit: '15.00',
        isActive: true,
        usageLimit: 1000,
        usageCount: 0
      });
      
      console.log("‚úÖ Cupom TESTE2025 criado com 10 raspadinhas de b√¥nus");
    } else {
      // Atualizar cupom existente
      await db.update(coupons)
        .set({
          bonusAmount: '10',
          bonusType: 'scratch_cards',
          minDeposit: '15.00',
          isActive: true
        })
        .where(eq(coupons.code, 'TESTE2025'));
      
      console.log("\n‚úÖ Cupom TESTE2025 atualizado:");
      console.log(`   Tipo: scratch_cards`);
      console.log(`   B√¥nus: 10 raspadinhas`);
      console.log(`   Dep√≥sito m√≠nimo: R$ 15.00`);
    }
    
    // 3. Listar usu√°rios com cupons aplicados mas sem b√¥nus
    console.log("\nüìä Verificando usu√°rios com cupons aplicados...");
    
    const usersWithCoupons = await db.select({
      id: users.id,
      name: users.name,
      email: users.email,
      couponApplied: users.couponApplied,
      currentCoupon: users.currentCoupon
    })
    .from(users)
    .where(and(
      eq(users.couponApplied, 1),
      isNotNull(users.currentCoupon)
    ));
    
    console.log(`\nEncontrados ${usersWithCoupons.length} usu√°rios com cupons aplicados`);
    
    // 4. Verificar se eles receberam o b√¥nus
    let needsFixCount = 0;
    for (const user of usersWithCoupons) {
      // Verificar se o cupom j√° foi usado
      const uses = await db.select()
        .from(couponUses)
        .where(eq(couponUses.userId, user.id));
      
      const [wallet] = await db.select()
        .from(wallets)
        .where(eq(wallets.userId, user.id));
      
      if (uses.length === 0 && wallet && wallet.scratchBonus === 0) {
        needsFixCount++;
        console.log(`\n‚ö†Ô∏è Usu√°rio ${user.name} (ID: ${user.id}) tem cupom ${user.currentCoupon} mas sem b√¥nus`);
      }
    }
    
    if (needsFixCount > 0) {
      console.log(`\nüîç Total de ${needsFixCount} usu√°rios precisam ter o b√¥nus aplicado`);
      console.log("Para aplicar o b√¥nus, eles precisam fazer um novo dep√≥sito");
      console.log("O sistema agora est√° corrigido e aplicar√° o b√¥nus automaticamente");
    } else {
      console.log("\n‚úÖ Todos os usu√°rios com cupons j√° receberam seus b√¥nus!");
    }
    
    // 5. Verificar a configura√ß√£o dos cupons
    console.log("\nüìã Configura√ß√£o atual dos cupons:");
    const allCoupons = await db.select()
      .from(coupons)
      .where(eq(coupons.isActive, true));
    
    for (const coupon of allCoupons) {
      console.log(`\nüéüÔ∏è ${coupon.code}:`);
      console.log(`   Descri√ß√£o: ${coupon.description}`);
      console.log(`   Tipo: ${coupon.bonusType}`);
      console.log(`   B√¥nus: ${coupon.bonusAmount}`);
      console.log(`   Dep√≥sito m√≠nimo: R$ ${coupon.minDeposit}`);
      console.log(`   Usos: ${coupon.usageCount}/${coupon.usageLimit || 'ilimitado'}`);
    }
    
  } catch (error) {
    console.error("‚ùå Erro:", error);
  }
  
  process.exit(0);
}

fixCouponSystem();